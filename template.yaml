AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Application for Pull Request based AWS CDK operation

Metadata:
  AWS::ServerlessRepo::Application:
    Name: cdkbot
    Description: Application for Pull Request based AWS CDK operation
    Author: sambaiz
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['cloudformation', 'cdk']
    HomePageUrl: https://github.com/sambaiz/cdkbot
    SemanticVersion: 0.2.6
    SourceCodeUrl: https://github.com/sambaiz/cdkbot

Parameters:
  Platform:
    Description: Only support github
    Type: String
    AllowedValues:
      - github
    Default: github
  GitHubUserName:
    Description: Name of the GitHub user calling the API
    Type: String
  GitHubAccessToken:
    Description: Access token of the GitHub user calling the API
    Type: String
    NoEcho: true
  GitHubWebhookSecret:
    Description: Repository's webhook secret
    Type: String
    NoEcho: true

Globals:
  Function:
    Timeout: 600
    MemorySize: 1024

Resources:
  OperationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/operation/
      Handler: operation
      Runtime: go1.x
      Role: !GetAtt CDKRole.Arn
      Layers:
        - !Ref NPMLayer
      Environment:
        Variables:
          PLATFORM: !Ref Platform
          GITHUB_USER_NAME: !Ref GitHubUserName
          GITHUB_ACCESS_TOKEN: !Ref GitHubAccessToken
          GITHUB_WEBHOOK_SECRET: !Ref GitHubWebhookSecret
  OperationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${OperationFunction}
      RetentionInDays: 14
  WebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/webhook/
      Handler: webhook
      Runtime: go1.x
      Role: !GetAtt InvokeOperationFunctionRole.Arn
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          INVOKE_FUNTION_ARN: !GetAtt OperationFunction.Arn
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /webhook
            Method: POST
  WebhookFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${WebhookFunction}
      RetentionInDays: 14
  CDKRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  InvokeOperationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "cdkbot_invoke_operation_function"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource: !GetAtt OperationFunction.Arn
  NPMLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: NPMLayer
      Description: npm layer
      ContentUri: './npm-layer'
      CompatibleRuntimes:
        - go1.x
      RetentionPolicy: Delete
Outputs:
  WebhookEndpoint:
    Description: "Webhook endpoint"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/webhook"