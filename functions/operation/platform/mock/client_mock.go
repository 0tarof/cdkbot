// Code generated by MockGen. DO NOT EDIT.
// Source: functions/operation/platform/client.go

// Package mock is a generated GoMock package.
package mock

import (
	"context"
	"github.com/golang/mock/gomock"
	"github.com/sambaiz/cdkbot/functions/operation/constant"
	"reflect"
)

// MockClienter is a mock of Clienter interface
type MockClienter struct {
	ctrl     *gomock.Controller
	recorder *MockClienterMockRecorder
}

// MockClienterMockRecorder is the mock recorder for MockClienter
type MockClienterMockRecorder struct {
	mock *MockClienter
}

// NewMockClienter creates a new mock instance
func NewMockClienter(ctrl *gomock.Controller) *MockClienter {
	mock := &MockClienter{ctrl: ctrl}
	mock.recorder = &MockClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClienter) EXPECT() *MockClienterMockRecorder {
	return m.recorder
}

// CreateComment mocks base method
func (m *MockClienter) CreateComment(ctx context.Context, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment
func (mr *MockClienterMockRecorder) CreateComment(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockClienter)(nil).CreateComment), ctx, body)
}

// AddLabel mocks base method
func (m *MockClienter) AddLabel(ctx context.Context, label constant.Label) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabel", ctx, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabel indicates an expected call of AddLabel
func (mr *MockClienterMockRecorder) AddLabel(ctx, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabel", reflect.TypeOf((*MockClienter)(nil).AddLabel), ctx, label)
}

// AddLabelToOtherPRs mocks base method
func (m *MockClienter) AddLabelToOtherPRs(ctx context.Context, label constant.Label) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabelToOtherPRs", ctx, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabelToOtherPRs indicates an expected call of AddLabelToOtherPRs
func (mr *MockClienterMockRecorder) AddLabelToOtherPRs(ctx, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabelToOtherPRs", reflect.TypeOf((*MockClienter)(nil).AddLabelToOtherPRs), ctx, label)
}

// RemoveLabel mocks base method
func (m *MockClienter) RemoveLabel(ctx context.Context, label constant.Label) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLabel", ctx, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLabel indicates an expected call of RemoveLabel
func (mr *MockClienterMockRecorder) RemoveLabel(ctx, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLabel", reflect.TypeOf((*MockClienter)(nil).RemoveLabel), ctx, label)
}

// GetPullRequestBaseBranch mocks base method
func (m *MockClienter) GetPullRequestBaseBranch(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestBaseBranch", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestBaseBranch indicates an expected call of GetPullRequestBaseBranch
func (mr *MockClienterMockRecorder) GetPullRequestBaseBranch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestBaseBranch", reflect.TypeOf((*MockClienter)(nil).GetPullRequestBaseBranch), ctx)
}

// GetPullRequestLatestCommitHash mocks base method
func (m *MockClienter) GetPullRequestLatestCommitHash(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestLatestCommitHash", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestLatestCommitHash indicates an expected call of GetPullRequestLatestCommitHash
func (mr *MockClienterMockRecorder) GetPullRequestLatestCommitHash(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestLatestCommitHash", reflect.TypeOf((*MockClienter)(nil).GetPullRequestLatestCommitHash), ctx)
}

// GetPullRequestLabels mocks base method
func (m *MockClienter) GetPullRequestLabels(ctx context.Context) (map[string]constant.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestLabels", ctx)
	ret0, _ := ret[0].(map[string]constant.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestLabels indicates an expected call of GetPullRequestLabels
func (mr *MockClienterMockRecorder) GetPullRequestLabels(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestLabels", reflect.TypeOf((*MockClienter)(nil).GetPullRequestLabels), ctx)
}

// SetStatus mocks base method
func (m *MockClienter) SetStatus(ctx context.Context, state constant.State, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", ctx, state, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus
func (mr *MockClienterMockRecorder) SetStatus(ctx, state, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockClienter)(nil).SetStatus), ctx, state, description)
}
